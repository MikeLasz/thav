library(glasso)
library(matrixcalc)
library(igraph)
library(stargazer)
test <- matrix(rep(0,4), ncol=2)
colnames(test)<- c(1,2)
colnames(test)<- c(0.3, 2.4)
test
test[0.3]
test[, 0.3]
test[, 0.4]
test[, "0.3"]
val <- 0.3
test[, str(val)]
str(val)
toString(var)
toString(val)
test[, toStrin(val)]
test[, toString(val)]
# rownames of results_avg, results_std, i.e. the different settings
names_rows <- function(n_seq, d_seq)
{
names <- rep("", length(n_seq) * length(d_seq))
index <- 1
for(n in seq_n)
{
for(d in seq_d)
{
names[index] <- paste0( "n=",n ,", d=", d)
index <- index + 1
}
}
return(names)
}
names_rows(c(300, 200, 100), c(100, 200, 300))
# rownames of results_avg, results_std, i.e. the different settings
names_rows <- function(seq_n, seq_d)
{
names <- rep("", length(n_seq) * length(d_seq))
index <- 1
for(n in seq_n)
{
for(d in seq_d)
{
names[index] <- paste0( "n=",n ,", d=", d)
index <- index + 1
}
}
return(names)
}
names_rows(c(300, 200, 100), c(100, 200, 300))
# rownames of results_avg, results_std, i.e. the different settings
names_rows <- function(seq_n, seq_d)
{
names <- rep("", length(seq_n) * length(seq_d))
index <- 1
for(n in seq_n)
{
for(d in seq_d)
{
names[index] <- paste0( "n=",n ,", d=", d)
index <- index + 1
}
}
return(names)
}
names_rows(c(300, 200, 100), c(100, 200, 300))
simu_env <- function(method, seq_C, seq_d=c(200, 300, 400), seq_n=c(200, 300, 400), seq_r=0.2*0.95^(40:0))
{
num_reps <- 10
num_settings <- length(seq_d) * length(seq_n)
results_avg <- results_std <- matrix(rep(0, num_settings * (length(seq_C) + 1)), ncol=length(seq_C) + 1)
colnames(results_avg) <- colnames(results_std) <- c(seq_C, "stars")
rownames(results_avg) <- rownames(results_std) <- names_rows(seq_n, seq_d)
for(C_index in 1:length(seq_C))
{
C <- seq_C[C_index]
index_row <- 1
for(n_index in 1:length(seq_n))
{
for(d_index in 1:length(seq_d))
{
f1 <- rep(0, num_reps)
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
av <- method(theta, n, C, seq_r)
score <- f1score(theta, av)
f1[rep] <- score$f1
}
results_avg[index_row, C_index] <- mean(f1)
results_std[index_row, C_index] <- std(f1)
index_row <- index_row + 1
}
}
}
print(results_avg)
return(conc_matrix(results_avg, results_std))
}
dim(theta)
dim(theta)[1]
vanilla_thav <- function(theta, n, C, seq_r)
{
d <- dim(theta)[1]
data <- mvrnorm(n, mu=rep(0, d), Sigma=solve(theta))
thAV.estimator(data, seq_r=seq_r, C=C)
}
simu_env <- function(method, seq_C, seq_d=c(200, 300, 400), seq_n=c(200, 300, 400), seq_r=0.2*0.95^(40:0))
{
num_reps <- 10
num_settings <- length(seq_d) * length(seq_n)
results_avg <- results_std <- matrix(rep(0, num_settings * (length(seq_C) + 1)), ncol=length(seq_C) + 1)
colnames(results_avg) <- colnames(results_std) <- c(seq_C, "stars")
rownames(results_avg) <- rownames(results_std) <- names_rows(seq_n, seq_d)
for(C_index in 1:length(seq_C))
{
C <- seq_C[C_index]
index_row <- 1
for(n_index in 1:length(seq_n))
{
for(d_index in 1:length(seq_d))
{
f1 <- rep(0, num_reps)
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
av <- method(theta, n, C, seq_r)
score <- f1score(theta, av)
f1[rep] <- score$f1
}
results_avg[index_row, C_index] <- mean(f1)
results_std[index_row, C_index] <- std(f1)
index_row <- index_row + 1
}
}
}
print(results_avg)
return(conc_matrix(results_avg, results_std))
}
# test case:
simu_env( vanilla_thav, seq_C=c(0.2, 0.3, 0.4), seq_d=c(50, 100), seq_n=c(200, 300, 400))
library(thav.glasso)
library(MASS)
library(huge)
library(glasso)
library(matrixcalc)
library(igraph)
library(stargazer)
# test case:
simu_env( vanilla_thav, seq_C=c(0.2, 0.3, 0.4), seq_d=c(50, 100), seq_n=c(200, 300, 400))
thav_scaling <- function(theta, n, C, seq_r)
{
d <- dim(theta)[1]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
thAV.estimator(data, seq_r=seq_r, C=C)
}
thav_scaling()
vanilla_thav(theta, 300, C=0.3, seq_r=seq_r)
seq_r <- 0.2*0.95(40:0)
seq_r <- 0.2*0.95^(40:0)
vanilla_thav(theta, 300, C=0.3, seq_r=seq_r)
data <- mvrnorm(300, mu=rep(0, 200), Sigma=solve(theta))
data <- scale(data)
mean(data)
mean(data[, 1])
mean(data[, 2])
mean(data[, 5])
var(data)
diag(var(data))
simu_env <- function(method, seq_C, seq_d=c(200, 300, 400), seq_n=c(200, 300, 400), seq_r=0.2*0.95^(40:0), num_reps=10)
{
num_reps <- 4
num_settings <- length(seq_d) * length(seq_n)
results_avg <- results_std <- matrix(rep(0, num_settings * (length(seq_C) + 1)), ncol=length(seq_C) + 1)
colnames(results_avg) <- colnames(results_std) <- c(seq_C, "stars")
rownames(results_avg) <- rownames(results_std) <- names_rows(seq_n, seq_d)
for(C_index in 1:length(seq_C))
{
C <- seq_C[C_index]
index_row <- 1
for(n_index in 1:length(seq_n))
{
for(d_index in 1:length(seq_d))
{
f1 <- rep(0, num_reps)
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
av <- method(theta, n, C, seq_r)
score <- f1score(theta, av)
f1[rep] <- score$f1
}
results_avg[index_row, C_index] <- mean(f1)
results_std[index_row, C_index] <- std(f1)
index_row <- index_row + 1
}
}
}
print(results_avg)
return(conc_matrix(results_avg, results_std))
}
simu_env( thav_scaling, seq_C=c(1, 1.5, 2), seq_d=c(50, 100), seq_n=c(200, 300), num_reps=4)
0.95^(40:0)
simu_env( thav_scaling, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(200, 300), seq_n=c(200, 300), num_reps=4, seq_r=0.95^(40:0))
0.9^(40:1)
0.95^(40:1)
simu_env( thav_scaling, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(200, 300), seq_n=c(200, 300), num_reps=4, seq_r=0.9^(40:0))
simu_env( thav_scaling2, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(200, 300), seq_n=c(200, 300), num_reps=4, seq_r=0.9^(40:0))
thav_scaling2 <- function(theta, n, C, seq_r)
{
d <- dim(theta)[1]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
return(thAV.estimator(data, seq_r=seq_r, C=C, lambda=2))
}
simu_env( thav_scaling2, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(200, 300), seq_n=c(200, 300), num_reps=4, seq_r=0.9^(40:0))
simu_env( thav_scaling2, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(200, 300), seq_n=c(200, 300), num_reps=4, seq_r=0.9^(40:25))
simu_env( thav_scaling, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(200, 300), seq_n=c(200, 300), num_reps=4, seq_r=0.9^(40:25))
0.9^(40:25)
0.9^(40:10)
simu_env( thav_scaling2, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(200, 300), seq_n=c(200, 300), num_reps=4, seq_r=0.9^(40:10))
theta <- generateGraph(200)[[1]]
data <- scale(mvrnorm(n=300, mu=rep(0, 200), Sigma=solve(theta)))
av_glasso(data, seq_r = 0.2*0.95^(40:25), C=1.5)
0.2*0.95^(40:25)
simu_env( thav_scaling, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(200, 300), seq_n=c(200, 300), num_reps=4, seq_r=seq(0.03, 0.2, length.out = 10))
simu_env <- function(method, seq_C, seq_d=c(200, 300, 400), seq_n=c(200, 300, 400), seq_r=0.2*0.95^(40:0), num_reps=10)
{
num_settings <- length(seq_d) * length(seq_n)
results_avg <- results_std <- matrix(rep(0, num_settings * (length(seq_C) + 2)), ncol=length(seq_C) + 2)
colnames(results_avg) <- colnames(results_std) <- c(seq_C, "stars", "stars_thresholded")
rownames(results_avg) <- rownames(results_std) <- names_rows(seq_n, seq_d)
precision_avg <- recall_avg <- precision_std <- recall_std <- results_avg
for(C_index in 1:length(seq_C))
{
C <- seq_C[C_index]
index_row <- 1
for(n_index in 1:length(seq_n))
{
for(d_index in 1:length(seq_d))
{
f1 <- prec <- recall <- f1_stars <- precision_stars <- recall_stars <- f1_stars_th <- precision_stars_th <- recall_stars_th <- rep(0, num_reps)
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
av <- method(theta, n, C, seq_r)
score <- f1score(theta, av)
f1[rep] <- score$f1
prec[rep] <- score$precision
recall[rep] <- score$recall
if(C_index==length(seq_C)) # compute stars iterations only once, not for all C iterations
{
# scale or not?
data <- mvrnorm(n=n, mu=rep(0, d), Sigma=solve(theta))
stars <- huge.select(huge(data, method="glasso", verbose=FALSE), criterion="stars", verbose=FALSE)$opt.icov
score_stars <- f1score(theta, stars)
score_stars_th <- f1score(theta, apply(stars, c(1,2), function(x) if(abs(x)<=0.05) {return(0)} else{return(x)}))
f1_stars[rep] <- score_stars$f1
precision_stars[rep] <- score_stars$precision
recall_stars[rep] <- score_stars$recall
#print(score_stars$f1)
f1_stars_th[rep] <- score_stars_th$f1
precision_stars_th[rep] <- score_stars_th$precision
recall_stars_th[rep] <- score_stars_th$recall
}
}
results_avg[index_row, C_index] <- mean(f1)
precision_avg[index_row, C_index] <- mean(prec)
recall_avg[index_row, C_index] <- mean(recall)
results_std[index_row, C_index] <- std(f1)
precision_std[index_row, C_index] <- std(prec)
recall_std[index_row, C_index] <- std(recall)
results_avg[index_row, length(seq_C) + 1] <- mean(f1_stars)
results_avg[index_row, length(seq_C) + 2] <- mean(f1_stars_th)
results_std[index_row, length(seq_C) + 1] <- std(f1_stars)
results_std[index_row, length(seq_C) + 2] <- mean(f1_stars_th)
precision_avg[index_row, length(seq_C) + 1] <- mean(precision_stars)
precision_avg[index_row, length(seq_C) + 2] <- mean(precision_stars_th)
precision_std[index_row, length(seq_C) + 1] <- std(precision_stars)
precision_std[index_row, length(seq_C) + 2] <- mean(precision_stars_th)
recall_avg[index_row, length(seq_C) + 1] <- mean(recall_stars)
recall_avg[index_row, length(seq_C) + 2] <- mean(recall_stars_th)
recall_std[index_row, length(seq_C) + 1] <- std(recall_stars)
recall_std[index_row, length(seq_C) + 2] <- mean(recall_stars_th)
index_row <- index_row + 1
}
}
}
#print(results_avg)
return(list("f1"=conc_matrix(results_avg, results_std), "prec"=conc_matrix(precision_avg, precision_std),
"recall"=conc_matrix(recall_avg, recall_std)))
}
#easy test case:
simu_env(thav_scaling2, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(50, 100), seq_n=c(200, 300), num_reps=3, seq_r=seq(0.03, 0.3, length.out = 10))
library(MASS)
library(huge)
library(glasso)
library(matrixcalc)
library(igraph)
library(stargazer)
#easy test case:
simu_env(thav_scaling2, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(50, 100), seq_n=c(200, 300), num_reps=3, seq_r=seq(0.03, 0.3, length.out = 10))
library(thav.glasso)
library(thav.glasso)
library(MASS)
library(huge)
library(glasso)
library(matrixcalc)
library(igraph)
library(stargazer)
#easy test case:
simu_env(thav_scaling2, seq_C=c(0.75, 1, 1.25, 1.5, 1.75, 2), seq_d=c(50, 100), seq_n=c(200, 300), num_reps=3, seq_r=seq(0.03, 0.3, length.out = 10))
seq_C = round(seq(0.5, 2, length.out = 10), 2)
seq_C <- round(seq(0.5, 2, length.out = 10), 2)
seq_d <- c(200, 300, 200) # c(200, 300, 200, 100, 200, 300)
seq_n <- c(300, 200, 400) # c(300, 200, 400, 300, 200, 300)
seq_r <- seq(0.03, 0.3, length.out = 30)
num_reps = 10
simulation_thavscaling <- simu_env(thav_scaling, seq_C=seq_C, seq_d=seq_d, seq_n=seq_n, num_reps=1, seq_r=seq_r)
simu_env <- function(method, seq_C, seq_d=c(200, 300, 400), seq_n=c(200, 300, 400), seq_r=0.2*0.95^(40:0), num_reps=10, graph="random")
{
num_settings <- length(seq_d) * length(seq_n)
results_avg <- results_std <- matrix(rep(0, num_settings * (length(seq_C) + 2)), ncol=length(seq_C) + 2)
colnames(results_avg) <- colnames(results_std) <- c(seq_C, "stars", "stars_thresholded")
rownames(results_avg) <- rownames(results_std) <- names_rows(seq_n, seq_d)
precision_avg <- recall_avg <- precision_std <- recall_std <- results_avg
for(C_index in 1:length(seq_C))
{
C <- seq_C[C_index]
index_row <- 1
for(n_index in 1:length(seq_n))
{
for(d_index in 1:length(seq_d))
{
f1 <- prec <- recall <- f1_stars <- precision_stars <- recall_stars <- f1_stars_th <- precision_stars_th <- recall_stars_th <- rep(0, num_reps)
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
av <- method(theta, n, C, seq_r)
score <- f1score(theta, av)
f1[rep] <- score$f1
prec[rep] <- score$precision
recall[rep] <- score$recall
if(C_index==length(seq_C)) # compute stars iterations only once, not for all C iterations
{
# scale or not?
data <- mvrnorm(n=n, mu=rep(0, d), Sigma=solve(theta))
stars <- huge.select(huge(data, method="glasso", verbose=FALSE), criterion="stars", verbose=FALSE)$opt.icov
score_stars <- f1score(theta, stars)
score_stars_th <- f1score(theta, apply(stars, c(1,2), function(x) if(abs(x)<=0.05) {return(0)} else{return(x)}))
f1_stars[rep] <- score_stars$f1
precision_stars[rep] <- score_stars$precision
recall_stars[rep] <- score_stars$recall
#print(score_stars$f1)
f1_stars_th[rep] <- score_stars_th$f1
precision_stars_th[rep] <- score_stars_th$precision
recall_stars_th[rep] <- score_stars_th$recall
}
}
results_avg[index_row, C_index] <- mean(f1)
precision_avg[index_row, C_index] <- mean(prec)
recall_avg[index_row, C_index] <- mean(recall)
results_std[index_row, C_index] <- std(f1)
precision_std[index_row, C_index] <- std(prec)
recall_std[index_row, C_index] <- std(recall)
results_avg[index_row, length(seq_C) + 1] <- mean(f1_stars)
results_avg[index_row, length(seq_C) + 2] <- mean(f1_stars_th)
results_std[index_row, length(seq_C) + 1] <- std(f1_stars)
results_std[index_row, length(seq_C) + 2] <- mean(f1_stars_th)
precision_avg[index_row, length(seq_C) + 1] <- mean(precision_stars)
precision_avg[index_row, length(seq_C) + 2] <- mean(precision_stars_th)
precision_std[index_row, length(seq_C) + 1] <- std(precision_stars)
precision_std[index_row, length(seq_C) + 2] <- mean(precision_stars_th)
recall_avg[index_row, length(seq_C) + 1] <- mean(recall_stars)
recall_avg[index_row, length(seq_C) + 2] <- mean(recall_stars_th)
recall_std[index_row, length(seq_C) + 1] <- std(recall_stars)
recall_std[index_row, length(seq_C) + 2] <- mean(recall_stars_th)
index_row <- index_row + 1
}
}
}
#print(results_avg)
return(list("f1"=conc_matrix(results_avg, results_std), "prec"=conc_matrix(precision_avg, precision_std),
"recall"=conc_matrix(recall_avg, recall_std)))
}
vanilla_thav <- function(theta, n, C, seq_r)
{
d <- dim(theta)[1]
data <- mvrnorm(n, mu=rep(0, d), Sigma=solve(theta))
return(thAV.estimator(data, seq_r=seq_r, C=C))
}
vanilla_thav2 <- function(theta, n, C, seq_r)
{
d <- dim(theta)[1]
data <- mvrnorm(n, mu=rep(0, d), Sigma=solve(theta))
return(thAV.estimator(data, seq_r=seq_r, C=C, lambda=2))
}
thav_scaling <- function(theta, n, C, seq_r)
{
d <- dim(theta)[1]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
return(thAV.estimator(data, seq_r=seq_r, C=C))
}
thav_scaling2 <- function(theta, n, C, seq_r)
{
d <- dim(theta)[1]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
return(thAV.estimator(data, seq_r=seq_r, C=C, lambda=2))
}
library(thav.glasso)
library(MASS)
library(huge)
library(glasso)
library(matrixcalc)
library(igraph)
library(stargazer)
# rownames of results_avg, results_std, i.e. the different settings
names_rows <- function(seq_n, seq_d)
{
names <- rep("", length(seq_n) * length(seq_d))
index <- 1
for(n in seq_n)
{
for(d in seq_d)
{
names[index] <- paste0( "n=",n ,", d=", d)
index <- index + 1
}
}
return(names)
}
simulation_thavscaling <- simu_env(thav_scaling, seq_C=seq_C, seq_d=seq_d, seq_n=seq_n, num_reps=1, seq_r=seq_r)
simu_env <- function(method, seq_C, seq_d=c(200, 300, 400), seq_n=c(200, 300, 400), seq_r=0.2*0.95^(40:0), num_reps=10, graph="random")
{
num_settings <- length(seq_d) * length(seq_n)
results_avg <- results_std <- matrix(rep(0, num_settings * (length(seq_C) + 2)), ncol=length(seq_C) + 2)
colnames(results_avg) <- colnames(results_std) <- c(seq_C, "stars", "stars_thresholded")
rownames(results_avg) <- rownames(results_std) <- names_rows(seq_n, seq_d)
precision_avg <- recall_avg <- precision_std <- recall_std <- results_avg
for(C_index in 1:length(seq_C))
{
C <- seq_C[C_index]
index_row <- 1
for(n_index in 1:length(seq_n))
{
n <- seq_n[n_index]
for(d_index in 1:length(seq_d))
{
d <- seq_d[d_index]
f1 <- prec <- recall <- f1_stars <- precision_stars <- recall_stars <- f1_stars_th <- precision_stars_th <- recall_stars_th <- rep(0, num_reps)
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
av <- method(theta, n, C, seq_r)
score <- f1score(theta, av)
f1[rep] <- score$f1
prec[rep] <- score$precision
recall[rep] <- score$recall
if(C_index==length(seq_C)) # compute stars iterations only once, not for all C iterations
{
# scale or not?
data <- mvrnorm(n=n, mu=rep(0, d), Sigma=solve(theta))
stars <- huge.select(huge(data, method="glasso", verbose=FALSE), criterion="stars", verbose=FALSE)$opt.icov
score_stars <- f1score(theta, stars)
score_stars_th <- f1score(theta, apply(stars, c(1,2), function(x) if(abs(x)<=0.05) {return(0)} else{return(x)}))
f1_stars[rep] <- score_stars$f1
precision_stars[rep] <- score_stars$precision
recall_stars[rep] <- score_stars$recall
#print(score_stars$f1)
f1_stars_th[rep] <- score_stars_th$f1
precision_stars_th[rep] <- score_stars_th$precision
recall_stars_th[rep] <- score_stars_th$recall
}
}
results_avg[index_row, C_index] <- mean(f1)
precision_avg[index_row, C_index] <- mean(prec)
recall_avg[index_row, C_index] <- mean(recall)
results_std[index_row, C_index] <- std(f1)
precision_std[index_row, C_index] <- std(prec)
recall_std[index_row, C_index] <- std(recall)
results_avg[index_row, length(seq_C) + 1] <- mean(f1_stars)
results_avg[index_row, length(seq_C) + 2] <- mean(f1_stars_th)
results_std[index_row, length(seq_C) + 1] <- std(f1_stars)
results_std[index_row, length(seq_C) + 2] <- mean(f1_stars_th)
precision_avg[index_row, length(seq_C) + 1] <- mean(precision_stars)
precision_avg[index_row, length(seq_C) + 2] <- mean(precision_stars_th)
precision_std[index_row, length(seq_C) + 1] <- std(precision_stars)
precision_std[index_row, length(seq_C) + 2] <- mean(precision_stars_th)
recall_avg[index_row, length(seq_C) + 1] <- mean(recall_stars)
recall_avg[index_row, length(seq_C) + 2] <- mean(recall_stars_th)
recall_std[index_row, length(seq_C) + 1] <- std(recall_stars)
recall_std[index_row, length(seq_C) + 2] <- mean(recall_stars_th)
index_row <- index_row + 1
}
}
}
#print(results_avg)
return(list("f1"=conc_matrix(results_avg, results_std), "prec"=conc_matrix(precision_avg, precision_std),
"recall"=conc_matrix(recall_avg, recall_std)))
}
simulation_thavscaling <- simu_env(thav_scaling, seq_C=seq_C, seq_d=seq_d, seq_n=seq_n, num_reps=1, seq_r=seq_r)
simulation_thavscaling$f1
version()
version
install.packages(c("devtools", "hdi", "huge", "igraph", "matrixcalc", "stargazer"))
getwd()
setwd("home/mike/Mathematik/PhD/generalav/software/thav.glasso/applications")
setwd("home/mike/Mathematik/PhD/generalav/software/thav.glasso/application")
setwd("/home/mike/Mathematik/PhD/generalav/software/thav.glasso/applications")
install("..\\..\\thav.glasso")
library("devtools")
install.packages("devtools")
install.packages("devtools",  repo="https://cran.r-project.org/ ")
