simulation_suitableC <- function(n, d, seq_C, num_reps=10, seq_r=seq(0.03, 1.5, length.out=80))
{
results <- matrix(rep(0, length(seq_C) * (num_reps + 1)), ncol=length(seq_C))
for(num_C in 1:length(seq_C))
{
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
results[rep, num_C] <- f1score(theta, thAV.estimator(data, seq_r=seq_r, C=seq_C[num_C]))$f1
}
}
rownames(results) <- c(1:num_reps, "mean")
colnames(results) <- seq_C
return(results)
}
simulation_suitableC(300, 200, seq_C=seq(0.3, 3, by = 0.1), num_reps=2)
library("devtools")
require("thav.glasso")
require("MASS") # to sample from multivariate normal
require("igraph") # to generate graphs
require("stargazer") # to produce latex outputs
require("huge") # contains adjacency matrix generation and StARS + RIC estimation
require("matrixcalc") # to compute eigenvalues
require("glasso") # to compute the graphical lasso
simulation_suitableC(300, 200, seq_C=seq(0.3, 3, by = 0.1), num_reps=2)
simulation_suitableC(300, 100, seq_C=seq(0.3, 3, by = 0.1), num_reps=2)
simulation_suitableC <- function(n, d, seq_C, num_reps=10, seq_r=seq(0.03, 1.5, length.out=40), lambda=3)
{
results <- matrix(rep(0, length(seq_C) * (num_reps + 1)), ncol=length(seq_C))
for(num_C in 1:length(seq_C))
{
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
results[rep, num_C] <- f1score(theta, thAV.estimator(data, seq_r=seq_r, C=seq_C[num_C]), lambda=lambda)$f1
}
}
rownames(results) <- c(1:num_reps, "mean")
colnames(results) <- seq_C
return(results)
}
simulation_suitableC(300, 100, seq_C=seq(1.5, 2, by = 0.1), num_reps=2, lambda=2)
simulation_suitableC <- function(n, d, seq_C, num_reps=10, seq_r=seq(0.03, 1.5, length.out=40), lambda=3)
{
results <- matrix(rep(0, length(seq_C) * (num_reps + 1)), ncol=length(seq_C))
for(num_C in 1:length(seq_C))
{
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
results[rep, num_C] <- f1score(theta, thAV.estimator(data, seq_r=seq_r, C=seq_C[num_C]), lambda=lambda)$f1
}
}
rownames(results) <- c(1:num_reps, "mean")
colnames(results) <- seq_C
return(results)
}
simulation_suitableC(300, 100, seq_C=seq(1.5, 2, by = 0.1), num_reps=2, lambda=2)
simulation_suitableC <- function(n, d, seq_C, num_reps=10, seq_r=seq(0.03, 1.5, length.out=40), lambda=3)
{
results <- matrix(rep(0, length(seq_C) * (num_reps + 1)), ncol=length(seq_C))
for(num_C in 1:length(seq_C))
{
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
results[rep, num_C] <- f1score(theta, thAV.estimator(data, seq_r=seq_r, C=seq_C[num_C], lambda=lambda))$f1
}
}
rownames(results) <- c(1:num_reps, "mean")
colnames(results) <- seq_C
return(results)
}
simulation_suitableC(300, 100, seq_C=seq(1.5, 2, by = 0.1), num_reps=2, lambda=2)
simulation_suitableC(300, 100, seq_C=seq(0.7, 2, by = 0.1), num_reps=5, lambda=2)
simulation_suitableC(300, 100, seq_C=seq(0.7, 2, by = 0.1), num_reps=5, lambda=1)
simulation_suitableC <- function(n, d, seq_C, num_reps=10, seq_r=seq(0.03, 1.5, length.out=40), lambda=3)
{
results <- matrix(rep(0, length(seq_C) * (num_reps + 1)), ncol=length(seq_C))
for(num_C in 1:length(seq_C))
{
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
results[rep, num_C] <- f1score(theta, thAV.estimator(data, seq_r=seq_r, C=seq_C[num_C], lambda=lambda))$f1
}
}
rownames(results) <- c(1:num_reps, "mean")
colnames(results) <- seq_C
results[rep + 1, ] <- apply(results[1:rep, ], 2, mean(x))
return(results)
}
simulation_suitableC(300, 100, seq_C=seq(0.3, 0.5, by = 0.1), num_reps=3, lambda=3)
simulation_suitableC <- function(n, d, seq_C, num_reps=10, seq_r=seq(0.03, 1.5, length.out=40), lambda=3)
{
results <- matrix(rep(0, length(seq_C) * (num_reps + 1)), ncol=length(seq_C))
for(num_C in 1:length(seq_C))
{
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
results[rep, num_C] <- f1score(theta, thAV.estimator(data, seq_r=seq_r, C=seq_C[num_C], lambda=lambda))$f1
}
}
rownames(results) <- c(1:num_reps, "mean")
colnames(results) <- seq_C
results[rep + 1, ] <- apply(results[1:rep, ], 2, function(x) mean(x))
return(results)
}
simulation_suitableC(300, 100, seq_C=seq(0.3, 0.5, by = 0.1), num_reps=3, lambda=3)
simulation_suitableC(300, 100, seq_C=seq(0.3, 2, by = 0.1), num_reps=5, lambda=3)
simulation_suitableC(300, 100, seq_C=seq(2, 3.5, by = 0.1), num_reps=5, lambda=3)
simulation_suitableC <- function(n, d, seq_C, num_reps=10, seq_r=seq(0.03, 1.5, length.out=40), lambda=3)
{
results <- matrix(rep(0, length(seq_C) * (num_reps + 3)), ncol=length(seq_C))
precision <- recall <- matrix(rep(0, length(seq_C) * num_reps), ncol=length(seq_C))
for(num_C in 1:length(seq_C))
{
for(rep in 1:num_reps)
{
theta <- generateGraph(d)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
score <- f1score(theta, thAV.estimator(data, seq_r=seq_r, C=seq_C[num_C], lambda=lambda))
precision[rep, num_C] <- score$precision
recall[rep, num_C] <- score$recall
results[rep, num_C] <- score$f1
}
}
rownames(results) <- c(1:num_reps, "f1_mean", "precision_mean", "recall_mean")
colnames(results) <- seq_C
results[rep + 1, ] <- apply(results[1:rep, ], 2, function(x) mean(x))
results[rep + 2, ] <- apply(precision, 2, function(x) mean(x))
results[rep + 3, ] <- apply(recall, 2, function(x) mean(x))
return(results)
}
simulation_suitableC(300, 100, seq_C=seq(2, 3.5, by = 0.1), num_reps=5, lambda=3)
simulation_suitableC(300, 100, seq_C=seq(0.3, 3.5, by = 0.1), num_reps=5, lambda=3)
simulation_suitableC(300, 100, seq_C=seq(0.3, 3.5, by = 0.1), num_reps=5, lambda=2)
simulation_suitableC(300, 100, seq_C=seq(0.3, 3.5, by = 0.1), num_reps=5, lambda=1)
simulation_suitableC(300, 200, seq_C=seq(0.3, 3.5, by = 0.1), num_reps=5, lambda=1)
simulation_suitableC(200, 300, seq_C=seq(0.3, 3.5, by = 0.1), num_reps=5, lambda=1)
diag(var(mvrnorm(300, 200, Sigma=solve(generateGraph(200)[[1]]))))
diag(var(mvrnorm(300, mu=rep(0, 200), Sigma=solve(generateGraph(200)[[1]]))))
var(mvrnorm(300, mu=rep(0, 200), Sigma=solve(generateGraph(200)[[1]])))
d <- 200
n <- 300
theta <- generateGraph(d)[[1]]
data <- mvrnorm(n, mu=rep(0, d), Sigma=solve(theta))
var(data)[1:10,1:10]
var(scale(data))
var(data)[1:10,1:10]
var(scale(data))[1:10, 1:10]
glasso(var(data), rho=0.2)$wi[1:10, 1:10]
glasso(var(scale(data)), rho=0.2)$wi[1:10, 1:10]
glasso(var(data), rho=0.2)$wi[1:10, 1:10]
glasso(var(data), rho=0.1)$wi[1:10, 1:10]
glasso(var(scale(data)), rho=0.1)$wi[1:10, 1:10]
av_glasso(data)$Thetahat[1:10, 1:10]
av_glasso(scale(data))$Thetahat[1:10, 1:10]
library(huge)
data <- huge.generator()$data
var(data)
diag(var(data))
setwd("C:\\Users\\laszk\\Desktop\\Mathematik\\PhD\\generalav\\software\\")
require("thav.glasso")
data <- mvrnorm(200, rep(0, 50), solve(generateGraph(50)[[ยน]]))
library(MASS)
data <- mvrnorm(200, rep(0, 50), solve(generateGraph(50)[[ยน]]))
data <- mvrnorm(200, mu=rep(0, 50), Sigma=solve(generateGraph(50)[[ยน]]))
data <- mvrnorm(200, mu=rep(0, 50), Sigma=solve(generateGraph(50)[[1]]))
library(igraph)
data <- mvrnorm(200, mu=rep(0, 50), Sigma=solve(generateGraph(50)[[1]]))
library("matrixcalc")
data <- mvrnorm(200, mu=rep(0, 50), Sigma=solve(generateGraph(50)[[1]]))
diag(var(data))
datanpn <- huge.npn(data)
diag(var(datanpn))
infloss(var(data), var(datanpn))
infloss(data, datanpn)
data <- huge.generator(v=0.1)$data
diag(var(data))
data <- huge.generator(v=0.5)$data
diag(var(data))
library(glasso)
data <- mvrnorm(200, mu=rep(0, 50), Sigma=solve(generateGraph(50)[[1]]))
glassopack <- glasso(var(data), rho=0.2)$wi
hugepack <- huge.glasso(data, lambda=0.2)
hugepack
hugepack <- huge.glasso(data, lambda=0.2)$icov
hugepack <- huge.glasso(data, lambda=0.2)$icov[[1]]
norm(hugepack)
norm(hugepack-glassopack)
View(hugepack)
View(glassopack)
data <- mvrnorm(200, mu=rep(0, 300), Sigma=solve(generateGraph(300)[[1]]))
library(tictoc)
install.packages(tictoc)
install.packages("tictoc")
library(tictoc)
tic()
glassopack <- glasso(var(data), rho=0.2)$wi
toc()
tic()
hugepack <- huge.glasso(data, lambda=0.2)$icov[[1]]
toc()
data <- mvrnorm(200, mu=rep(0, 500), Sigma=solve(generateGraph(500)[[1]]))
tic()
glassopack <- glasso(var(data), rho=0.2)$wi
toc()
tic()
hugepack <- huge.glasso(data, lambda=0.2)$icov[[1]]
toc()
View(glassopack)
knitr::opts_chunk$set(echo = TRUE)
require("devtools") # to install thav.glasso
library("devtools")
install("../../thav.glasso") # contains the estimator and simulation methods
require("thav.glasso")
graph_comparison(300, 30)
require("MASS") # to sample from multivariate normal
require("igraph") # to generate graphs
require("stargazer") # to produce latex outputs
require("huge") # contains adjacency matrix generation and StARS + RIC estimation
require("matrixcalc") # to compute eigenvalues
require("glasso") # to compute the graphical lasso
# graph design
igraph_options
# graph design
igraph_options(vertex.size       =2,
vertex.label.cex  = 1,
edge.width        = 1 ,
vertex.label      ="",
vertex.color      ="black",
vertex.frame.color=NA,
edge.color        ="coral1")
# graph design
igraph_options(vertex.size       =2,
vertex.label.cex  = 1,
edge.width        = 1 ,
vertex.label      ="",
vertex.color      ="black",
vertex.frame.color=NA,
edge.color        ="coral1")
graph_comparison(300, 30)
set.seed(121)
graph_comparison(300, 200)
set.seed(59)
graph_comparison(200, 300)
set.seed(65)
graph_comparison(400, 200)
set.seed(14)
graph_comparison(300, 200, "scale-free")
set.seed(43)
graph_comparison(200, 300, "scale-free")
set.seed(65)
graph_comparison(400, 200, "scale-free")
graph_comparison(400, 50, "scale-free")
getwd()
graph_comparison(300, 30, "scale-free")
set.seed(14)
graph_comparison(300, 200, "scale-free")
set.seed(43)
graph_comparison(200, 300, "scale-free")
set.seed(65)
graph_comparison(400, 200, "scale-free")
knitr::opts_chunk$set(echo = TRUE)
require("devtools") # to install thav.glasso
library("devtools")
install("../../thav.glasso") # contains the estimator and simulation methods
require("thav.glasso")
library("thav.glasso")
source("https://kingaa.github.io/scripts/pompTest.R")
getwd()
setwd("Mathematik")
setwd("PhD/generalav/software/thav.glasso/simulations")
library("devtools")
install("../../thav.glasso")
install("../../thav.glasso")
library("thav.glasso")
library("thav.glasso")
comparison_similarity
comparison_similarity(200, 300)
library("thav.glasso")
install("../../thav.glasso")
library("devtools")
install("../../thav.glasso")
library("thav.glasso")
comparison_similarity(200, 300, num_reps = 2)
