write.csv(auxiliaries, paste0("../data/aux_sff1thresholded_C", C, "n", n, "d", d, ".csv"), row.names=FALSE)
}
}
}
set.seed(30)
adaptation_threshold(300, 200)
set.seed(142)
adaptation_threshold(300, 200, graph="scale-free")
'set.seed(29)
adaptation_threshold(300, 200, C=0.5, graph="scale-free")
set.seed(23)
adaptation_threshold(300, 200, C=0.6, graph="scale-free")
set.seed(55)
adaptation_threshold(300, 200, C=0.8, graph="scale-free")
'
set.seed(100)
adaptation_threshold(200, 300)
'set.seed(2)
adaptation_threshold(200, 300, C=0.5)
set.seed(29)
adaptation_threshold(200, 300, C=0.6)
set.seed(42)
adaptation_threshold(200, 300, C=0.8)'
set.seed(100)
adaptation_threshold(200, 300, graph="scale-free")
'set.seed(84)
adaptation_threshold(200, 300, C=0.5, graph="scale-free")
set.seed(29)
adaptation_threshold(200, 300, C=0.6, graph="scale-free")
set.seed(42)
adaptation_threshold(200, 300, C=0.8, graph="scale-free")'
set.seed(234)
adaptation_threshold(400, 200)
'set.seed(49)
adaptation_threshold(400, 200, C=0.5)
set.seed(7)
adaptation_threshold(400, 200, C=0.6)
set.seed(33)
adaptation_threshold(400, 200, C=0.8)'
set.seed(234)
adaptation_threshold(400, 200, graph="scale-free")
'set.seed(500)
adaptation_threshold(400, 200, C=0.5, graph="scale-free")
set.seed(7)
adaptation_threshold(400, 200, C=0.6, graph="scale-free")
set.seed(33)
adaptation_threshold(400, 200, C=0.8, graph="scale-free")'
set.seed(48)
adaptation_threshold(300, 200)
theta <- generateGraph(200)[[1]]
data <- scale(mvrnorm(300, mu=rep(0, 200), Sigma=solve(theta)))
empvar <- var(data)
theta_ml <- solve(empvar)
thresholds <- seq(0, 0.3, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_empvar <- apply(empvar, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores <- f1score(theta, th_empvar)$f1
}
plot(x=thresholds, y=f1scores)
thresholds <- seq(0, 0.3, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_empvar <- apply(empvar, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores[j] <- f1score(theta, th_empvar)$f1
}
plot(x=thresholds, y=f1scores)
thresholds <- seq(0, 1, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_empvar <- apply(empvar, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores[j] <- f1score(theta, th_empvar)$f1
}
plot(x=thresholds, y=f1scores)
thresholds <- seq(0, 1, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_theta <- apply(theta_ml, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores[j] <- f1score(theta, th_empvar)$f1
}
plot(x=thresholds, y=f1scores)
theta_ml
theta_ml <- glasso(empvar, rho=0.1, penalize.diagonal = FALSE)$wi
thresholds <- seq(0, 1, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_theta <- apply(theta_ml, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores[j] <- f1score(theta, th_empvar)$f1
}
plot(x=thresholds, y=f1scores)
thresholds
theta_ml <- glasso(empvar, rho=0.2, penalize.diagonal = FALSE)$wi
thresholds <- seq(0, 1, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_theta <- apply(theta_ml, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores[j] <- f1score(theta, th_empvar)$f1
}
plot(x=thresholds, y=f1scores)
theta_ml
theta_ml <- solve(empvar)
#theta_ml <- glasso(empvar, rho=0.2, penalize.diagonal = FALSE)$wi
thresholds <- seq(0, 1, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_theta <- apply(theta_ml, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores[j] <- f1score(theta, th_theta)$f1
}
plot(x=thresholds, y=f1scores)
thresholds <- seq(0, 4, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_theta <- apply(theta_ml, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores[j] <- f1score(theta, th_theta)$f1
}
plot(x=thresholds, y=f1scores)
thresholds <- seq(0, 10, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_theta <- apply(theta_ml, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores[j] <- f1score(theta, th_theta)$f1
}
plot(x=thresholds, y=f1scores)
theta_ml <- glasso(empvar, rho=0.2, penalize.diagonal = FALSE)$wi
thresholds <- seq(0, 10, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_theta <- apply(theta_ml, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores[j] <- f1score(theta, th_theta)$f1
}
plot(x=thresholds, y=f1scores)
thresholds <- seq(0, 0.4, length.out = 30)
f1scores <- rep(0, length(thresholds))
for(j in 1:length(thresholds))
{
th_theta <- apply(theta_ml, c(1,2), function(x) if(abs(x) <= thresholds[j]){return(0)} else{return(x)})
f1scores[j] <- f1score(theta, th_theta)$f1
}
plot(x=thresholds, y=f1scores)
comparison_similarity <- function(n, d, seq_C=c(0.4, 0.5, 0.6, 0.7, 0.8), graph="random", num_reps=50, latex=FALSE)
{
pb <- txtProgressBar(min = 0, max = length(seq_C) * (length(seq_C) - 1) / 2 + num_reps, style = 3)
#dif_f1 <- matrix(rep(0, length(seq_C)^2 + length(seq_C)), ncol=length(seq_C))
colnames(dif_f1) <- seq_C
rownames(dif_f1) <- c(seq_C, "f1")
dif_f1 <- matrix(rep(0, length(seq_C) * (length(seq_C) + 1)), ncol=length(seq_C))
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
thav_estimators <- list()
for(index_C in 1:length(seq_C))
{
C <- seq_C[index_C]
thav <- thAV.estimator(data, C=C)
thav_estimators <- thav_estimators.append(thav)
dif_f1[length(seq_C) + 1, index_C] <- dif_f1[length(seq_C) + 1, index_C] + f1score(theta, thav)$f1
}
for(i in 1:(length(seq_C) - 1))
{
for(j in (i + 1):length(seq_C))
{
dif_f1[i, j] <- dif_f1[i, j] + f1score(thav_estimators[[i]], thav_estimators[[j]])$f1
}
}
}
return(1/num_reps * dif_f1)
}
comparison_similarity <- function(n, d, seq_C=c(0.4, 0.5, 0.6, 0.7, 0.8), graph="random", num_reps=50, latex=FALSE)
{
pb <- txtProgressBar(min = 0, max = num_reps, style = 3)
#dif_f1 <- matrix(rep(0, length(seq_C)^2 + length(seq_C)), ncol=length(seq_C))
colnames(dif_f1) <- seq_C
rownames(dif_f1) <- c(seq_C, "f1")
dif_f1 <- matrix(rep(0, length(seq_C) * (length(seq_C) + 1)), ncol=length(seq_C))
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
thav_estimators <- list()
for(index_C in 1:length(seq_C))
{
C <- seq_C[index_C]
thav <- thAV.estimator(data, C=C)
thav_estimators <- thav_estimators.append(thav)
dif_f1[length(seq_C) + 1, index_C] <- dif_f1[length(seq_C) + 1, index_C] + f1score(theta, thav)$f1
}
for(i in 1:(length(seq_C) - 1))
{
for(j in (i + 1):length(seq_C))
{
dif_f1[i, j] <- dif_f1[i, j] + f1score(thav_estimators[[i]], thav_estimators[[j]])$f1
}
}
setTxtProgressBar(pb, rep)
}
close(pb)
return(1/num_reps * dif_f1)
}
comparison_similarity(300, 200, num_reps=5)
comparison_similarity <- function(n, d, seq_C=c(0.4, 0.5, 0.6, 0.7, 0.8), graph="random", num_reps=50, latex=FALSE)
{
pb <- txtProgressBar(min = 0, max = num_reps, style = 3)
#dif_f1 <- matrix(rep(0, length(seq_C)^2 + length(seq_C)), ncol=length(seq_C))
dif_f1 <- matrix(rep(0, length(seq_C) * (length(seq_C) + 1)), ncol=length(seq_C))
colnames(dif_f1) <- seq_C
rownames(dif_f1) <- c(seq_C, "f1")
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
thav_estimators <- list()
for(index_C in 1:length(seq_C))
{
C <- seq_C[index_C]
thav <- thAV.estimator(data, C=C)
thav_estimators <- thav_estimators.append(thav)
dif_f1[length(seq_C) + 1, index_C] <- dif_f1[length(seq_C) + 1, index_C] + f1score(theta, thav)$f1
}
for(i in 1:(length(seq_C) - 1))
{
for(j in (i + 1):length(seq_C))
{
dif_f1[i, j] <- dif_f1[i, j] + f1score(thav_estimators[[i]], thav_estimators[[j]])$f1
}
}
setTxtProgressBar(pb, rep)
}
close(pb)
return(1/num_reps * dif_f1)
}
comparison_similarity(300, 200, num_reps=5)
testl <- list()
testl <- list.append(testl, "abc")
testl
testl[[1]] <- "abc"
testl
testl[1] <- "abc"
testl
testl[1] <- "dc"
testl
comparison_similarity <- function(n, d, seq_C=c(0.4, 0.5, 0.6, 0.7, 0.8), graph="random", num_reps=50, latex=FALSE)
{
pb <- txtProgressBar(min = 0, max = num_reps, style = 3)
#dif_f1 <- matrix(rep(0, length(seq_C)^2 + length(seq_C)), ncol=length(seq_C))
dif_f1 <- matrix(rep(0, length(seq_C) * (length(seq_C) + 1)), ncol=length(seq_C))
colnames(dif_f1) <- seq_C
rownames(dif_f1) <- c(seq_C, "f1")
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
thav_estimators <- list()
for(index_C in 1:length(seq_C))
{
C <- seq_C[index_C]
thav <- thAV.estimator(data, C=C)
thav_estimators[index_C] <- thav
dif_f1[length(seq_C) + 1, index_C] <- dif_f1[length(seq_C) + 1, index_C] + f1score(theta, thav)$f1
}
for(i in 1:(length(seq_C) - 1))
{
for(j in (i + 1):length(seq_C))
{
dif_f1[i, j] <- dif_f1[i, j] + f1score(thav_estimators[[i]], thav_estimators[[j]])$f1
}
}
setTxtProgressBar(pb, rep)
}
close(pb)
return(1/num_reps * dif_f1)
}
comparison_similarity(300, 200, num_reps=5)
comparison_similarity <- function(n, d, seq_C=c(0.4, 0.5, 0.6, 0.7, 0.8), graph="random", num_reps=50, latex=FALSE)
{
pb <- txtProgressBar(min = 0, max = num_reps, style = 3)
#dif_f1 <- matrix(rep(0, length(seq_C)^2 + length(seq_C)), ncol=length(seq_C))
dif_f1 <- matrix(rep(0, length(seq_C) * (length(seq_C) + 1)), ncol=length(seq_C))
colnames(dif_f1) <- seq_C
rownames(dif_f1) <- c(seq_C, "f1")
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
thav_estimators <- list()
for(index_C in 1:length(seq_C))
{
C <- seq_C[index_C]
print(C)
thav <- thAV.estimator(data, C=C)
print(thav)
thav_estimators[index_C] <- thav
dif_f1[length(seq_C) + 1, index_C] <- dif_f1[length(seq_C) + 1, index_C] + f1score(theta, thav)$f1
}
for(i in 1:(length(seq_C) - 1))
{
for(j in (i + 1):length(seq_C))
{
dif_f1[i, j] <- dif_f1[i, j] + f1score(thav_estimators[[i]], thav_estimators[[j]])$f1
}
}
setTxtProgressBar(pb, rep)
}
close(pb)
return(1/num_reps * dif_f1)
}
comparison_similarity(300, 200, num_reps=5)
comparison_similarity <- function(n, d, seq_C=c(0.4, 0.5, 0.6, 0.7, 0.8), graph="random", num_reps=50, latex=FALSE)
{
pb <- txtProgressBar(min = 0, max = num_reps, style = 3)
#dif_f1 <- matrix(rep(0, length(seq_C)^2 + length(seq_C)), ncol=length(seq_C))
dif_f1 <- matrix(rep(0, length(seq_C) * (length(seq_C) + 1)), ncol=length(seq_C))
colnames(dif_f1) <- seq_C
rownames(dif_f1) <- c(seq_C, "f1")
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
thav_estimators <- list()
for(index_C in 1:length(seq_C))
{
C <- seq_C[index_C]
thav <- thAV.estimator(data, C=C)
thav_estimators[index_C] <- thav
print(thav_estimators[index_C])
dif_f1[length(seq_C) + 1, index_C] <- dif_f1[length(seq_C) + 1, index_C] + f1score(theta, thav)$f1
}
for(i in 1:(length(seq_C) - 1))
{
for(j in (i + 1):length(seq_C))
{
dif_f1[i, j] <- dif_f1[i, j] + f1score(thav_estimators[i], thav_estimators[j])$f1
}
}
setTxtProgressBar(pb, rep)
}
close(pb)
return(1/num_reps * dif_f1)
}
comparison_similarity(300, 200, num_reps=5)
comparison_similarity <- function(n, d, seq_C=c(0.4, 0.5, 0.6, 0.7, 0.8), graph="random", num_reps=50, latex=FALSE)
{
pb <- txtProgressBar(min = 0, max = num_reps, style = 3)
#dif_f1 <- matrix(rep(0, length(seq_C)^2 + length(seq_C)), ncol=length(seq_C))
dif_f1 <- matrix(rep(0, length(seq_C) * (length(seq_C) + 1)), ncol=length(seq_C))
colnames(dif_f1) <- seq_C
rownames(dif_f1) <- c(seq_C, "f1")
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
thav_estimators <- list(theta)
for(index_C in 1:length(seq_C))
{
C <- seq_C[index_C]
thav <- thAV.estimator(data, C=C)
thav_estimators[index_C] <- thav
print(thav_estimators[index_C])
dif_f1[length(seq_C) + 1, index_C] <- dif_f1[length(seq_C) + 1, index_C] + f1score(theta, thav)$f1
}
for(i in 1:(length(seq_C) - 1))
{
for(j in (i + 1):length(seq_C))
{
dif_f1[i, j] <- dif_f1[i, j] + f1score(thav_estimators[i], thav_estimators[j])$f1
}
}
setTxtProgressBar(pb, rep)
}
close(pb)
return(1/num_reps * dif_f1)
}
comparison_similarity(300, 200, num_reps=5)
thav_estimators <- list(theta)
thav_estimators
comparison_similarity <- function(n, d, seq_C=c(0.4, 0.5, 0.6, 0.7, 0.8), graph="random", num_reps=50, latex=FALSE)
{
pb <- txtProgressBar(min = 0, max = num_reps, style = 3)
#dif_f1 <- matrix(rep(0, length(seq_C)^2 + length(seq_C)), ncol=length(seq_C))
dif_f1 <- matrix(rep(0, length(seq_C) * (length(seq_C) + 1)), ncol=length(seq_C))
colnames(dif_f1) <- seq_C
rownames(dif_f1) <- c(seq_C, "f1")
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
thav_estimators <- list(theta)
for(index_C in 1:length(seq_C))
{
C <- seq_C[index_C]
thav <- thAV.estimator(data, C=C)
thav_estimators[[index_C]] <- thav
print(thav_estimators[[index_C]])
dif_f1[length(seq_C) + 1, index_C] <- dif_f1[length(seq_C) + 1, index_C] + f1score(theta, thav)$f1
}
for(i in 1:(length(seq_C) - 1))
{
for(j in (i + 1):length(seq_C))
{
dif_f1[i, j] <- dif_f1[i, j] + f1score(thav_estimators[i], thav_estimators[j])$f1
}
}
setTxtProgressBar(pb, rep)
}
close(pb)
return(1/num_reps * dif_f1)
}
comparison_similarity(300, 200, num_reps=5)
comparison_similarity <- function(n, d, seq_C=c(0.4, 0.5, 0.6, 0.7, 0.8), graph="random", num_reps=50, latex=FALSE)
{
pb <- txtProgressBar(min = 0, max = num_reps, style = 3)
#dif_f1 <- matrix(rep(0, length(seq_C)^2 + length(seq_C)), ncol=length(seq_C))
dif_f1 <- matrix(rep(0, length(seq_C) * (length(seq_C) + 1)), ncol=length(seq_C))
colnames(dif_f1) <- seq_C
rownames(dif_f1) <- c(seq_C, "f1")
for(rep in 1:num_reps)
{
theta <- generateGraph(d, graph=graph)[[1]]
data <- scale(mvrnorm(n, mu=rep(0, d), Sigma=solve(theta)))
thav_estimators <- list(theta)
for(index_C in 1:length(seq_C))
{
C <- seq_C[index_C]
thav <- thAV.estimator(data, C=C)
thav_estimators[[index_C]] <- thav
dif_f1[length(seq_C) + 1, index_C] <- dif_f1[length(seq_C) + 1, index_C] + f1score(theta, thav)$f1
}
for(i in 1:(length(seq_C) - 1))
{
for(j in (i + 1):length(seq_C))
{
dif_f1[i, j] <- dif_f1[i, j] + f1score(thav_estimators[[i]], thav_estimators[[j]])$f1
}
}
setTxtProgressBar(pb, rep)
}
close(pb)
return(1/num_reps * dif_f1)
}
comparison_similarity(300, 200, num_reps=5)
library(MASS)
n <- 5
d <- 3
diag(3)
n <- 5
d <- 3
x <- mvrnorm(n, mu=rep(0, d), Sigma=diag(d))
y <- 0.5*x + mvrnorm(n, mu=rep(0, d), Sigma=diag(d)*1/4)
plot(x=x, y=y)
lines(x=x, y=0.5*x)
y
x
x <- mvrnorm(n, mu=rep(0, d), Sigma=diag(d))
x
x <- mvrnorm(1, mu=rep(0, n), Sigma=diag(n))
x
y <- 0.5*x + mvrnorm(n, mu=rep(0, d), Sigma=diag(d)*1/4)
y
y <- 0.5*x + mvrnorm(1, mu=rep(0, n), Sigma=diag(n)*1/4)
y
x <- mvrnorm(1, mu=rep(0, n), Sigma=diag(n))
y <- 0.5*x + mvrnorm(1, mu=rep(0, n), Sigma=diag(n)*1/4)
x
y
plot(x=x, y=y)
lines(x=x, y=0.5*x)
library(glmnet)
fm <- lm(y~x)
lm(formula = y ~ x)
coefficients(fm)
coefficients(fm)[1]
lines(x=x, y= coefficients(fm)[1] + x*coeffiecients(fm)[2])
lines(x=x, y= coefficients(fm)[1] + x*coefficients(fm)[2])
lines(x=x, y= coefficients(fm)[1] + x*coefficients(fm)[2], col="blue")
new_fm <- lm(y~c(x, additional_data))
additional_data <- mvrnorm(1, mu=rep(0, 100), Sigma=diag(n) *1/100)
additional_data <- mvrnorm(1, mu=rep(0, 100), Sigma=diag(100) *1/100)
new_fm <- lm(y~c(x, additional_data))
new_data <- c(x, additional_data)
new_data
new_fm <- lm(y~new_data)
new_fm <- lm(y, new_data)
new_fm <- lm(y~., new_data)
new_fm <- lm(y~.)
new_fm <- lm(y~., new_data)
new_fm <- lm(new_data)
new_fm <- lm(y ~ ., data=new_data)
new_data
new_fm <- lm(y ~ ., data=as.data.frame(cbind(y, new_data)))
coefficients(new_fm)
new_fm <- lm(y ~ ., data=as.data.frame(new_data))
as.data.frame(t(new_data))
new_data <- as.data.frame(t(c(x, additional_data)))
new_data
new_fm <- lm(y ~ ., data=as.data.frame(cbind(y, new_data)))
coefficients(new_fm)
setwd("/home/mike/Mathematik/PhD/generalav/software/thav.glasso/")
library(devtools)
library(roxygen2)
document()
knitr::opts_chunk$set(echo = TRUE)
install("../../thav.glasso") # contains the estimator and simulation methods
