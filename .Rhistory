}
print(ls_hh)
householder_rotation(ls_hh)
ls_hh <- list()
for(j in 1:(D-1))
{
hh <- rep(0, D)
hh[j] <- 1
hh[j + 1] <- 1
hh <- matrix(hh, ncol=1)
ls_hh[[j]] <- hh
}
print(ls_hh)
householder_rotation(ls_hh)
ls_hh <- list()
for(j in 1:(D-1))
{
hh <- rep(0, D)
hh[j] <- 1
hh[j + 1] <- 1
hh <- matrix(hh, ncol=1)
ls_hh[[j]] <- hh
}
print(ls_hh)
householder_rotation(ls_hh)
ls_hh
for(j in 1:(D-1))
{
hh <- rep(0, D)
hh[j] <- 1
hh[j + 1] <- 2
hh <- matrix(hh, ncol=1)
ls_hh[[j]] <- hh
}
#rint(ls_hh)
householder_rotation(ls_hh)
ls_ijtheta <- list()
index <- 1
for(j in 1:D-1)
{
for(i in j + 1: D)
{
theta <- 1
ijtheta <- c(i, j, theta)
ls_ijtheta[[index]] <- ijtheta
index <- index + 1
}
}
ls_ijtheta
D
ls_ijtheta <- list()
index <- 1
for(j in 1:(D-1))
{
for(i in (j + 1): D)
{
theta <- 1
ijtheta <- c(i, j, theta)
ls_ijtheta[[index]] <- ijtheta
index <- index + 1
}
}
ls_ijtheta
givens_prod(ls_ijtheta)
givens_prod <- function(ls_ijtheta)
{
givens_prod <- diag(D)
for(entry in ls_ijtheta)
{
i <- ls_ijtheta[1]
j <- ls_ijtheta[2]
theta <- ls_ijtheta[3]
givens_prod = givens(i, j, theta) %*% givens_prod
}
return(givens_prod)
}
givens_prod(ls_ijtheta)
givens <- function(i, j, theta)
{
givens <- diag(D)
givens[i,i] <- cos(theta)
givens[j, j] <- cos(theta)
givens[i,j] <- -sin(theta)
givens[j,i] <- sin(theta)
return(givens)
}
givens_prod(ls_ijtheta)
givens_prod <- function(ls_ijtheta)
{
givens_prod <- diag(D)
for(entry in ls_ijtheta)
{
i <- entry[1]
j <- entry[2]
theta <- entry[3]
givens_prod = givens(i, j, theta) %*% givens_prod
}
return(givens_prod)
}
givens_prod(ls_ijtheta)
# Sparsity Givens rotations:
ls_ijtheta <- list()
for(j in 1:(D-1))
{
ijtheta <- c(j, j+1, 1)
ls_ijtheta[[j]] <- ijtheta
}
ls_ijtheta
givens_prod(ls_ijtheta)
theta <- rep(0, D(D-1)/2)
theta[1] <- 1
index <- D
for(j in 2:(D-1))
{
theta[index] <- 1
index <- index + (D-j)
}
theta
# Sparsity Cayley:
theta <- rep(0, D(D-1)/2)
D
rep(0, 5)
theta <- rep(0, 5)
# Sparsity Cayley:
theta <- rep(0, int(D(D-1)/2))
# Sparsity Cayley:
theta <- rep(0, as.integer(D(D-1)/2))
D
# Sparsity Cayley:
theta <- rep(0, as.integer(D*(D-1)/2))
theta
theta[1] <- 1
index <- D
for(j in 2:(D-1))
{
theta[index] <- 1
index <- index + (D-j)
}
theta
skew(theta)
skew_matrix(theta)
cayley_rotation(theta)
det(cayley_rotation(theta))
householder_rotation(ls_hh) #non sparse
for(x in c(0, 0.1, 0.2, 0.3, 0.4)){ print(abs(cos(x)) + abs(sin(x)))}
for(x in c(0, 0.1, 0.2, 0.3, 0.4,0.5, 0.8, 1, 1.3, 1.5, 2)){ print(abs(cos(x)) + abs(sin(x)))}
range(1,5)
seq(0, 2*pi, 100)
seq(0, 2*pi, 100)
seq(0, 2*pi, length.out=100)
y <- abs(cos(x)) + abs(sin(x))
plot(x, y)
y
x <- seq(0, 2*pi, length.out=100)
y <- abs(cos(x)) + abs(sin(x))
plot(x, y)
y <- (abs(cos(x)) + abs(sin(x)))^2
plot(x, y)
y
y <- (abs(cos(x)) + abs(sin(x)))^3
plot(x, y)
y <- (abs(cos(x)) + abs(sin(x)))^4
plot(x, y)
y <- (abs(cos(x)) + abs(sin(x)))^(1/2)
plot(x, y)
y <- abs(cos(x)) + abs(sin(x))
plot(x, y)
y
y <- 2*cos(x)
plot(x, y)
y <- -2*cos(x)
plot(x, y)
givens <- function(i, j, theta)
{
givens <- diag(D)
givens[i,i] <- cos(theta)
givens[j, j] <- cos(theta)
givens[i,j] <- -sin(theta)
givens[j,i] <- sin(theta)
return(givens)
}
givens_prod <- function(ls_ijtheta)
{
givens_prod <- diag(D)
for(entry in ls_ijtheta)
{
i <- entry[1]
j <- entry[2]
theta <- entry[3]
givens_prod = givens(i, j, theta) %*% givens_prod
}
return(givens_prod)
}
householder_reflection <- function(householder_vector)
{
norm_vector <- norm(householder_vector, type="2")^2
return(diag(D) - 2* (householder_vector %*% t(householder_vector)) / norm_vector)
}
householder_rotation <- function(ls_hhvectors)
{
rota <- diag(D)
for(hh_vector in ls_hhvectors)
{
rota = householder_reflection(hh_vector) %*% rota
}
return(rota)
}
skew_matrix <- function(theta)
{
skew <- matrix(rep(0, D^2), ncol=D)
index_theta <- 1
for(j in 1:(D-1))
{
for(i in (j+1):D)
{
skew[j, i] <- theta[index_theta]
index_theta <- index_theta + 1
}
}
skew <- skew - t(skew)
return(skew)
}
cayley_rotation <- function(theta)
{
# theta is a vector in R^(D(D-1)/2)
skew <- skew_matrix(theta)
return( (diag(D) + skew) %*% solve(diag(D) - skew))
}
D = 5
ls_ijtheta <- list(c(1, 2, 0.5), c(2, 3, 0.9), c(4, 5, 4))
prod_givens(ls_ijtheta)
givens_prod(ls_ijtheta)
ls_ijtheta <- list(c(1, 2, 0.5), c(2, 3, theta), c(4, 5, 4))
givens_prod(ls_ijtheta)
ls_ijtheta <- list(c(1, 2, 0.5), c(2, 3, 0.8), c(4, 5, 4), c(4, 2, theta))
givens_prod(ls_ijtheta)
tr(givens_prod(ls_ijtheta))
sum(diag(givens_prod(ls_ijtheta)))
y <- abs(cos(x))
plot(x, y)
y <- 2 * cos(x)
plot(x, y)
y <- rep(0, 100)
index <- 1
x = seq(0, 2*pi, length.out=100)
for (theta in x)
{
ls_ijtheta <- list(c(1, 2, 0.5), c(2, 3, 0.8), c(4, 5, 4), c(4, 2, theta))
g <- givens_prod(ls_ijtheta)
y[index] <- sum(diag(g))
index <- index + 1
}
plot(x, y)
theta = 0
ls_ijtheta <- list(c(1, 2, 0.5), c(2, 3, 0.8), c(4, 5, 4), c(4, 2, theta))
g <- givens_prod(ls_ijtheta)
g
100^4
y <- rep(0, 100)
index <- 1
x = seq(0, 2*pi, length.out=10)
min = 2
for (theta1 in x)
{
for( theta2 in x)
{
for(theta3 in x)
{
for(theta4 in x)
{
ls_ijtheta <- list(c(1, 2, theta1), c(2, 3, theta2), c(4, 5, theta3), c(4, 2, theta4))
g <- givens_prod(ls_ijtheta)
if(sum(diag(g))<= min)
{
min <- sum(diag(g))
print(paste0("theta1 = ", theta1))
print(paste0("theta2 = ", theta2))
print(paste0("theta3 = ", theta3))
print(paste0("theta4 = ", theta4))
}
}
}
}
}
pi
for (theta1 in x)
{
for( theta2 in x)
{
for(theta3 in x)
{
for(theta4 in x)
{
ls_ijtheta <- list(c(1, 2, theta1), c(2, 3, theta2), c(4, 5, theta3), c(4, 2, theta4))
g <- givens_prod(ls_ijtheta)
if(sum(diag(g))<= min)
{
min <- sum(diag(g))
print(paste0("theta1 = ", theta1))
print(paste0("theta2 = ", theta2))
print(paste0("theta3 = ", theta3))
print(paste0("theta4 = ", theta4))
}
}
}
}
}
2pi
2*pi
pi
for (theta1 in x)
{
for( theta2 in x)
{
for(theta3 in x)
{
for(theta4 in x)
{
ls_ijtheta <- list(c(1, 2, theta1), c(2, 3, theta2), c(4, 5, theta3), c(4, 2, theta4))
g <- givens_prod(ls_ijtheta)
if(sum(diag(g))<= min)
{
min <- sum(diag(g))
print(paste0("theta1 = ", theta1))
print(paste0("theta2 = ", theta2))
print(paste0("theta3 = ", theta3))
print(paste0("theta4 = ", theta4))
print(g)
}
}
}
}
{
for( theta2 in x)
{
for(theta3 in x)
{
for(theta4 in x)
{
ls_ijtheta <- list(c(1, 2, theta1), c(2, 3, theta2), c(4, 5, theta3), c(4, 2, theta4))
g <- givens_prod(ls_ijtheta)
if(sum(diag(g))<= min)
{
min <- sum(diag(g))
print(paste0("theta1 = ", theta1))
print(paste0("theta2 = ", theta2))
print(paste0("theta3 = ", theta3))
print(paste0("theta4 = ", theta4))
print(g)
}
}
}
}
}
for (theta1 in x)
{
for( theta2 in x)
{
for(theta3 in x)
{
for(theta4 in x)
{
ls_ijtheta <- list(c(1, 2, theta1), c(2, 3, theta2), c(4, 5, theta3), c(4, 2, theta4))
g <- givens_prod(ls_ijtheta)
if(sum(diag(g))<= min)
{
min <- sum(diag(g))
print(paste0("theta1 = ", theta1))
print(paste0("theta2 = ", theta2))
print(paste0("theta3 = ", theta3))
print(paste0("theta4 = ", theta4))
print(g)
}
}
}
}
}
min = 2
for (theta1 in x)
{
for( theta2 in x)
{
for(theta3 in x)
{
for(theta4 in x)
{
ls_ijtheta <- list(c(1, 2, theta1), c(2, 3, theta2), c(4, 5, theta3), c(4, 2, theta4))
g <- givens_prod(ls_ijtheta)
if(sum(diag(g))<= min)
{
min <- sum(diag(g))
print(paste0("theta1 = ", theta1))
print(paste0("theta2 = ", theta2))
print(paste0("theta3 = ", theta3))
print(paste0("theta4 = ", theta4))
print(g)
}
}
}
}
}
y <- rep(0, 100)
index <- 1
x = seq(0, 2*pi, length.out=100)
min = 2
y <- rep(0, 100)
index <- 1
x = seq(0, 2*pi, length.out=100)
min = 2
for (theta1 in x)
{
for( theta2 in x)
{
for(theta3 in x)
{
for(theta4 in x)
{
ls_ijtheta <- list(c(1, 2, theta1), c(2, 3, theta2), c(4, 5, theta3), c(4, 2, theta4))
g <- givens_prod(ls_ijtheta)
if(sum(diag(g))<= min)
{
min <- sum(diag(g))
print(paste0("theta1 = ", theta1))
print(paste0("theta2 = ", theta2))
print(paste0("theta3 = ", theta3))
print(paste0("theta4 = ", theta4))
print(g)
}
}
}
}
}
knitr::opts_chunk$set(echo = TRUE)
require("devtools") # to install thav.glasso
install("../../thav.glasso") # contains the estimator and simulation methods
install("devtools")
library("devtools")
library("devtools")
install.packages("devtools")
library("devtools")
install.packages("testthat")
install.packages("pkgload")
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
require("devtools") # to install thav.glasso
install("../../thav.glasso") # contains the estimator and simulation methods
library(thav.glasso)
load_libraries() # loads all required libraries
install.packages("scalreg")
load_libraries() # loads all required libraries
install.packages(c("MASS", "igraph", "stargazer", "huge", "matrixcalc", "glasso"))
install.packages(c("MASS", "igraph", "stargazer", "huge", "matrixcalc", "glasso"))
knitr::opts_chunk$set(echo = TRUE)
load_libraries() # loads all required libraries
library(thav.glasso)
load_libraries() # loads all required libraries
install.packages("genscore")
load_libraries() # loads all required libraries
install.packages("scio")
library("devtools")
install_github("rluo/scio")
library("QUIC")
install.packages("QUIC")
library("scio")
knitr::opts_chunk$set(echo = TRUE)
require("devtools") # to install thav.glasso
install("../../thav.glasso") # contains the estimator and simulation methods
library(thav.glasso)
load_libraries() # loads all required libraries
# graph design
igraph_options(vertex.size       =2,
vertex.label.cex  = 1,
edge.width        = 1 ,
vertex.label      ="",
vertex.color      ="black",
vertex.frame.color=NA,
edge.color        ="coral1")
restart_R <- function()
{
rm(list = ls())
.rs.restartR()
}
set.seed(76)
simu_thav_others(300, 200, estimator="thav_rsme", C=0.5, lambda=2, num_reps=25, graph="random")
set.seed(76)
simu_thav_others(300, 200, estimator="thav_rsme", C=0.5, lambda=2, num_reps=25, graph="random")
set.seed(76)
simu_thav_others(300, 200, estimator="thav_rsme", C=0.5, lambda=2, num_reps=25, graph="random")
set.seed(54)
simu_thav_others(200, 300, estimator="thav_rsme", C=0.5, lambda=2, num_reps=25, graph="random")
set.seed(40)
simu_thav_others(400, 200, estimator="thav_rsme", C=0.5, lambda=2, num_reps=25, graph="random")
set.seed(944)
simu_thav_others(300, 200, estimator="thav_rsme", C=0.5, lambda=2, num_reps=25, graph="scale-free")
set.seed(11)
simu_thav_others(200, 300, estimator="thav_rsme", C=0.5, lambda=2, num_reps=25, graph="scale-free")
set.seed(83)
simu_thav_others(400, 200, estimator="thav_rsme", C=0.5, lambda=2, num_reps=25, graph="scale-free")
set.seed(400)
simu_f1_split(300, 200, 1, graph="scale-free")
set.seed(14)
graph_comparison(300, 200, "scale-free")#
set.seed(82)
graph_comparison(200, 300, "scale-free")#
set.seed(65)
graph_comparison(400, 200, "scale-free")#
setwd("/home/mike/Mathematik/PhD/software/thav.glasso")
setwd("/home/mike/Mathematik/PhD/generalav/software/thav.glasso")
library(devtools)
document("")
document()
install("../thav.glasso")
